using System;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using OpenAiNg.ChatFunctions;
using OpenAiNg.Code;

namespace OpenAiNg.Chat;

/// <summary>
///     Chat message sent or received from the API. Includes who is speaking in the "role" and the message text in the
///     "content"
/// </summary>
public class ChatMessage
{
	/// <summary>
	///     Creates an empty <see cref="ChatMessage" />, with <see cref="Role" /> defaulting to
	///     <see cref="ChatMessageRole.User" />
	/// </summary>
	public ChatMessage()
	{
		Role = ChatMessageRole.User;
		Id = Guid.NewGuid();
	}

	/// <summary>
	///     Constructor for a new Chat Message
	/// </summary>
	/// <param name="role">The role of the message, which can be "system", "assistant, "user", or "function".</param>
	/// <param name="content">The text to send in the message</param>
	public ChatMessage(ChatMessageRole role, string content)
	{
		Role = role;
		Content = content;
		Id = Guid.NewGuid();
	}

	/// <summary>
	///		Constructor for a new Chat Message with multiple parts
	/// </summary>
	/// <param name="role">The role of the message, which can be "system", "assistant, "user", or "function".</param>
	/// <param name="parts">Parts the message consists of</param>
	public ChatMessage(ChatMessageRole role, IEnumerable<ChatMessagePart> parts)
	{
		Role = role;
		Parts = parts.ToList();
		Id = Guid.NewGuid();
		Type = ChatMessageTypes.Image;
	}

	/// <summary>
	///     Constructor for a new Chat Message
	/// </summary>
	/// <param name="role">The role of the message, which can be "system", "assistant, "user", or "function".</param>
	/// <param name="content">The text to send in the message</param>
	/// <param name="id">Unique guid acting as an identifier. If null, assigned automatically.</param>
	public ChatMessage(ChatMessageRole role, string content, Guid? id)
	{
		Role = role;
		Content = content;
		Id = id ?? Guid.NewGuid();
	}

	/// <summary>
	/// The type of the message, which can be "text" or "chatImage"
	/// </summary>
	[JsonProperty("type")]
	[JsonConverter(typeof(ChatMessageTypes.ChatMessageTypesJsonConverter))]
	public ChatMessageTypes Type { get; set; } = ChatMessageTypes.Text;
	
	[JsonProperty("role")] 
    internal string? rawRole { get; set; }

    /// <summary>
    ///     The role of the message, which can be "system", "assistant", "user" or "function"
    /// </summary>
    [JsonIgnore]
    public ChatMessageRole? Role
    {
        get => ChatMessageRole.FromString(rawRole);
        set => rawRole = value?.ToString();
    }

    /// <summary>
    ///     The content of the message
    /// </summary>
    [JsonProperty("content", NullValueHandling = NullValueHandling.Include)]
    public string? Content { get; set; }
    /// <summary>
    ///		The chatImage if the message is an chatImage
    /// </summary>
    [JsonIgnore]
    public List<ChatMessagePart>? Parts { get; set; }

    /// <summary>
    ///     An optional name of the user in a multi-user chat
    /// </summary>
    [JsonProperty("name")]
    public string Name { get; set; }

    /// <summary>
    ///     Assigned in ctor. Use to remove / update messages from conversation.s
    /// </summary>
    [JsonIgnore]
    public Guid Id { get; }
    
    /// <summary>
    ///     Optional field tool calls
    ///     The name and arguments of tools that should be called, as generated by the model.
    /// </summary>
    [JsonProperty("tool_calls")]
    public List<ToolCall>? ToolCalls { get; set; }
}