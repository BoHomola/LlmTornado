using System.Collections.Generic;
using LlmTornado.Common;
using LlmTornado.Responses;
using Newtonsoft.Json;

namespace LlmTornado.Responses.Events;

/// <summary>
/// Event emitted when the response is in progress.
/// </summary>
public class ResponseInProgressEvent : ResponseRequest, IResponsesEvent
{
    /// <summary>
    /// The type of the event. Always "response.in_progress".
    /// </summary>
    [JsonProperty("type")]
    public virtual string Type { get; set; } = "response.in_progress";

    /// <summary>
    /// The sequence number of this event.
    /// </summary>
    [JsonProperty("sequence_number")]
    public int SequenceNumber { get; set; }

    /// <summary>
    /// Unique identifier for this Response.
    /// </summary>
    [JsonProperty("id")]
    public string Id { get; set; } = string.Empty;

    /// <summary>
    /// Unix timestamp (in seconds) of when this Response was created.
    /// </summary>
    [JsonProperty("created_at")]
    public long CreatedAt { get; set; }

    /// <summary>
    /// The object type of this resource - always set to "response".
    /// </summary>
    [JsonProperty("object")]
    public string Object { get; set; } = "response";

    /// <summary>
    /// The status of the response generation. One of "completed", "failed", "in_progress", "cancelled", "queued", or "incomplete".
    /// </summary>
    [JsonProperty("status")]
    public string Status { get; set; } = string.Empty;

    /// <summary>
    /// An array of content items generated by the model.
    /// </summary>
    [JsonProperty("output")]
    public List<ResponseOutputItem>? Output { get; set; }

    /// <summary>
    /// SDK-only convenience property that contains the aggregated text output from all output_text items in the output array, if any are present.
    /// </summary>
    [JsonProperty("output_text")]
    public string? OutputText { get; set; }

    /// <summary>
    /// Represents token usage details including input tokens, output tokens, a breakdown of output tokens, and the total tokens used.
    /// </summary>
    [JsonProperty("usage")]
    public ResponsesUsage? Usage { get; set; }

    /// <summary>
    /// An error object returned when the model fails to generate a Response.
    /// </summary>
    [JsonProperty("error")]
    public ResponseError? Error { get; set; }

    /// <summary>
    /// Details about why the response is incomplete.
    /// </summary>
    [JsonProperty("incomplete_details")]
    public ResponseIncompleteDetails? IncompleteDetails { get; set; }

    /// <summary>
    /// The type of this response event.
    /// </summary>
    [JsonIgnore]
    public virtual ResponseEventTypes EventType => ResponseEventTypes.ResponseInProgress;
}

/// <summary>
/// An error object returned when the model fails to generate a Response.
/// </summary>
public class ResponseError
{
    /// <summary>
    /// The error code for the response.
    /// </summary>
    [JsonProperty("code")]
    public string Code { get; set; } = string.Empty;

    /// <summary>
    /// A human-readable description of the error.
    /// </summary>
    [JsonProperty("message")]
    public string Message { get; set; } = string.Empty;
}

/// <summary>
/// Details about why the response is incomplete.
/// </summary>
public class ResponseIncompleteDetails
{
    /// <summary>
    /// The reason why the response is incomplete.
    /// </summary>
    [JsonProperty("reason")]
    public string Reason { get; set; } = string.Empty;
} 