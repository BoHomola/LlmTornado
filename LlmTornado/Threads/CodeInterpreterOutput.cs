using System;
using LlmTornado.Common;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace LlmTornado.Threads;

/// <summary>
/// Represents an abstract base class for outputs generated by a code interpreter.
/// </summary>
/// <remarks>
/// This class serves as a foundation for derived types, encapsulating shared properties
/// and behaviors for various code interpreter output formats.
/// </remarks>
[JsonConverter(typeof(CodeInterpreterOutputTypeConverter))]
public abstract class CodeInterpreterOutput
{
    /// <summary>
    ///     Output type. Can be either 'logs' or 'image'.
    /// </summary>
    [JsonProperty("type")]
    public CodeInterpreterOutputType Type { get; private set; }
}

/// <summary>
/// Code interpreter logs output.
/// </summary>
public sealed class CodeInterpreterOutputLogs : CodeInterpreterOutput
{
    /// <summary>
    ///     The text output from the Code Interpreter tool call.
    /// </summary>
    [JsonProperty("logs")]
    public string Logs { get; set; } = null!;
}

/// <summary>
///     Code interpreter image output.
/// </summary>
public sealed class CodeInterpreterOutputImage : CodeInterpreterOutput
{
    /// <summary>
    ///     Code interpreter image output.
    /// </summary>
    [JsonProperty("image")]
    public ImageFile Image { get; set; } = null!;
}

internal class CodeInterpreterOutputTypeConverter : JsonConverter<CodeInterpreterOutput>
{
    public override void WriteJson(JsonWriter writer, CodeInterpreterOutput? value, JsonSerializer serializer)
    {
        JObject jsonObject = JObject.FromObject(value!, serializer);
        jsonObject.WriteTo(writer);
    }

    public override CodeInterpreterOutput? ReadJson(JsonReader reader, Type objectType,
        CodeInterpreterOutput? existingValue,
        bool hasExistingValue, JsonSerializer serializer)
    {
        JObject jsonObject = JObject.Load(reader);
        string? typeToken = jsonObject["type"]?.ToString();
        if (!Enum.TryParse(typeToken, true, out CodeInterpreterOutputType codeInterpreterOutputType))
        {
            return null;
        }

        return codeInterpreterOutputType switch
        {
            CodeInterpreterOutputType.Image => jsonObject
                .ToObject<CodeInterpreterOutputImage>(serializer)!,
            CodeInterpreterOutputType.Logs => jsonObject
                .ToObject<CodeInterpreterOutputLogs>(serializer)!,
            _ => null
        };
    }
}