using System;
using System.Collections.Generic;
using LlmTornado.Code;
using Newtonsoft.Json;

namespace LlmTornado.Chat;

/// <summary>
///     Represents the Role of a <see cref="ChatMessage" />.  Typically, a conversation is formatted with a system message
///     first, followed by alternating user and assistant messages.  See
///     <see href="https://platform.openai.com/docs/guides/chat/introduction">the OpenAI docs</see> for more details about
///     usage.
/// </summary>
public class ChatMessageRoles : IEquatable<ChatMessageRoles>
{
    /// <summary>
    ///     Constructor is private to force usage of strongly typed values
    /// </summary>
    /// <param name="value"></param>
    private ChatMessageRoles(string value)
    {
        Value = value;
    }

    private string Value { get; }

    /// <summary>
    ///     The system message helps set the behavior of the assistant.
    /// </summary>
    public static ChatMessageRoles System { get; } = new ChatMessageRoles("system");

    /// <summary>
    ///     The user messages help instruct the assistant. They can be generated by the end users of an application, or set by
    ///     a developer as an instruction.
    /// </summary>
    public static ChatMessageRoles User { get; } = new ChatMessageRoles("user");

    /// <summary>
    ///     The assistant messages help store prior responses. They can also be written by a developer to help give examples of
    ///     desired behavior.
    /// </summary>
    public static ChatMessageRoles Assistant { get; } = new ChatMessageRoles("assistant");

    /// <summary>
    ///     The tool role can be used in models which support function access.
    /// </summary>
    public static ChatMessageRoles Tool { get; } = new ChatMessageRoles("tool");

    /// <summary>
    ///     Determines whether this instance and a specified object have the same value.
    /// </summary>
    /// <param name="other">The ChatMessageRole to compare to this instance</param>
    /// <returns>
    ///     true if other's value is the same as this instance; otherwise, false. If other is null, the method returns
    ///     false
    /// </returns>
    public bool Equals(ChatMessageRoles? other)
    {
        return other != null && Value.Equals(other.Value);
    }

    /// <summary>
    ///     Gets the singleton instance of <see cref="ChatMessageRoles" /> based on the string value.
    /// </summary>
    /// <param name="roleName">Muse be one of "system", "user", "assistant", or "function"</param>
    /// <returns></returns>
    public static ChatMessageRoles? FromString(string roleName)
    {
        return roleName switch
        {
            "system" => System,
            "user" => User,
            "assistant" => Assistant,
            "function" => Tool,
            "tool" => Tool,
            _ => null
        };
    }

    internal static readonly Dictionary<string, Code.ChatMessageRoles> MemberRolesDict = new Dictionary<string, Code.ChatMessageRoles>
    {
        { "system", Code.ChatMessageRoles.System },
        { "user", Code.ChatMessageRoles.User },
        { "assistant", Code.ChatMessageRoles.Assistant },
        { "tool", Code.ChatMessageRoles.Tool }
    };
    
    internal static readonly Dictionary<Code.ChatMessageRoles, string> MemberRolesDictInverse = new Dictionary<Code.ChatMessageRoles, string>
    {
        { Code.ChatMessageRoles.System, "system" },
        { Code.ChatMessageRoles.User, "user" },
        { Code.ChatMessageRoles.Assistant, "assistant" },
        { Code.ChatMessageRoles.Tool, "tool" }
    };
    
    internal static Code.ChatMessageRoles? MemberFromString(string? roleName)
    {
        return MemberRolesDict.GetValueOrDefault(roleName?.ToLowerInvariant().Trim() ?? string.Empty);
    }
    
    internal static string? MemberToString(Code.ChatMessageRoles? role)
    {
        return MemberRolesDictInverse.GetValueOrDefault(role ?? Code.ChatMessageRoles.User);
    }

    /// <summary>
    ///     Gets the string value for this role to pass to the API
    /// </summary>
    /// <returns>The size as a string</returns>
    public override string ToString()
    {
        return Value;
    }

    /// <summary>
    ///     Determines whether this instance and a specified object have the same value.
    /// </summary>
    /// <param name="obj">The ChatMessageRole to compare to this instance</param>
    /// <returns>
    ///     true if obj is a ChatMessageRole and its value is the same as this instance; otherwise, false. If obj is null,
    ///     the method returns false
    /// </returns>
    public override bool Equals(object? obj)
    {
        return Value.Equals((obj as ChatMessageRoles)?.Value);
    }

    /// <summary>
    ///     Returns the hash code for this object
    /// </summary>
    /// <returns>A 32-bit signed integer hash code</returns>
    public override int GetHashCode()
    {
        return Value.GetHashCode();
    }

    /// <summary>
    ///     Gets the string value for this role to pass to the API
    /// </summary>
    /// <param name="value">The ChatMessageRole to convert</param>
    public static implicit operator string(ChatMessageRoles value)
    {
        return value.Value;
    }
    
    internal class ChatMessageRoleJsonConverter : JsonConverter<ChatMessageRoles>
    {
        public override void WriteJson(JsonWriter writer, ChatMessageRoles? value, JsonSerializer serializer)
        {
            writer.WriteValue(value?.ToString());
        }

        public override ChatMessageRoles ReadJson(JsonReader reader, Type objectType, ChatMessageRoles? existingValue, bool hasExistingValue, JsonSerializer serializer)
        {
            if (reader.TokenType is JsonToken.String)
            {
                string? str = reader.Value as string;
                return new ChatMessageRoles(str);
            }

            return new ChatMessageRoles(reader.ReadAsString());
        }
    }
}